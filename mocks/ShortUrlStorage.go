// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ShortUrlStorage is an autogenerated mock type for the ShortUrlStorage type
type ShortUrlStorage struct {
	mock.Mock
}

type ShortUrlStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *ShortUrlStorage) EXPECT() *ShortUrlStorage_Expecter {
	return &ShortUrlStorage_Expecter{mock: &_m.Mock}
}

// FindByKey provides a mock function with given fields: ctx, shortKey
func (_m *ShortUrlStorage) FindByKey(ctx context.Context, shortKey string) (string, bool, error) {
	ret := _m.Called(ctx, shortKey)

	if len(ret) == 0 {
		panic("no return value specified for FindByKey")
	}

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, bool, error)); ok {
		return rf(ctx, shortKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, shortKey)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, shortKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ShortUrlStorage_FindByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByKey'
type ShortUrlStorage_FindByKey_Call struct {
	*mock.Call
}

// FindByKey is a helper method to define mock.On call
//   - ctx context.Context
//   - shortKey string
func (_e *ShortUrlStorage_Expecter) FindByKey(ctx interface{}, shortKey interface{}) *ShortUrlStorage_FindByKey_Call {
	return &ShortUrlStorage_FindByKey_Call{Call: _e.mock.On("FindByKey", ctx, shortKey)}
}

func (_c *ShortUrlStorage_FindByKey_Call) Run(run func(ctx context.Context, shortKey string)) *ShortUrlStorage_FindByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ShortUrlStorage_FindByKey_Call) Return(_a0 string, _a1 bool, _a2 error) *ShortUrlStorage_FindByKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ShortUrlStorage_FindByKey_Call) RunAndReturn(run func(context.Context, string) (string, bool, error)) *ShortUrlStorage_FindByKey_Call {
	_c.Call.Return(run)
	return _c
}

// FindByValue provides a mock function with given fields: ctx, longVlaue
func (_m *ShortUrlStorage) FindByValue(ctx context.Context, longVlaue string) (string, bool, error) {
	ret := _m.Called(ctx, longVlaue)

	if len(ret) == 0 {
		panic("no return value specified for FindByValue")
	}

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, bool, error)); ok {
		return rf(ctx, longVlaue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, longVlaue)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, longVlaue)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, longVlaue)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ShortUrlStorage_FindByValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByValue'
type ShortUrlStorage_FindByValue_Call struct {
	*mock.Call
}

// FindByValue is a helper method to define mock.On call
//   - ctx context.Context
//   - longVlaue string
func (_e *ShortUrlStorage_Expecter) FindByValue(ctx interface{}, longVlaue interface{}) *ShortUrlStorage_FindByValue_Call {
	return &ShortUrlStorage_FindByValue_Call{Call: _e.mock.On("FindByValue", ctx, longVlaue)}
}

func (_c *ShortUrlStorage_FindByValue_Call) Run(run func(ctx context.Context, longVlaue string)) *ShortUrlStorage_FindByValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ShortUrlStorage_FindByValue_Call) Return(_a0 string, _a1 bool, _a2 error) *ShortUrlStorage_FindByValue_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ShortUrlStorage_FindByValue_Call) RunAndReturn(run func(context.Context, string) (string, bool, error)) *ShortUrlStorage_FindByValue_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, shortKey, longValue
func (_m *ShortUrlStorage) Save(ctx context.Context, shortKey string, longValue string) error {
	ret := _m.Called(ctx, shortKey, longValue)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, shortKey, longValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShortUrlStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ShortUrlStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - shortKey string
//   - longValue string
func (_e *ShortUrlStorage_Expecter) Save(ctx interface{}, shortKey interface{}, longValue interface{}) *ShortUrlStorage_Save_Call {
	return &ShortUrlStorage_Save_Call{Call: _e.mock.On("Save", ctx, shortKey, longValue)}
}

func (_c *ShortUrlStorage_Save_Call) Run(run func(ctx context.Context, shortKey string, longValue string)) *ShortUrlStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ShortUrlStorage_Save_Call) Return(_a0 error) *ShortUrlStorage_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShortUrlStorage_Save_Call) RunAndReturn(run func(context.Context, string, string) error) *ShortUrlStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewShortUrlStorage creates a new instance of ShortUrlStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShortUrlStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShortUrlStorage {
	mock := &ShortUrlStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
